generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  roleId    Int      @id @default(autoincrement())
  roleName  String
  roleDesc  String
  isActive  Boolean
  createdAt DateTime @default(now()) @db.Timestamptz
  updatedAt DateTime @updatedAt @db.Timestamptz

  users       User[]
  permissions Permission[] @relation("permission_roles")

  @@map("roles")
}

model Permission {
  permissionId   Int      @id @default(autoincrement())
  permissionName String
  apiPath        String
  method         String
  module         String
  createdAt      DateTime @default(now()) @db.Timestamptz
  updatedAt      DateTime @updatedAt @db.Timestamptz

  roles Role[] @relation("permission_roles")

  @@map("permissions")
}

model Message {
  messageId Int      @id @default(autoincrement())
  content   String
  isRead    Boolean  @default(false)
  time      DateTime

  uploadImages UploadImage[]

  senderId Int
  sender   User @relation("sentMessages", fields: [senderId], references: [userId])

  receiverId Int?
  receiver   User? @relation("receivedMessages", fields: [receiverId], references: [userId])

  @@map("messages")
}

model UploadImage {
  uploadImageId Int    @id @default(autoincrement())
  url           String
  filePath      String

  reviewId Int?
  review   Review? @relation(fields: [reviewId], references: [reviewId])

  productId Int?
  product   Product? @relation(fields: [productId], references: [productId])

  messageId Int?
  message   Message? @relation(fields: [messageId], references: [messageId])

  banner                Banner?
  productImageEmbedding ProductImageEmbedding?
  user                  User?
  promotion             Promotion?
  systemConfig          SystemConfiguration?
  category              Category?
  news                  News?

  @@map("upload_images")
}

model Banner {
  bannerId  Int      @id @default(autoincrement())
  isActive  Boolean
  createdAt DateTime @default(now()) @db.Timestamptz
  updatedAt DateTime @updatedAt @db.Timestamptz

  uploadImageId Int         @unique
  uploadImage   UploadImage @relation(fields: [uploadImageId], references: [uploadImageId])

  systemConfigId Int
  systemConfig   SystemConfiguration @relation(fields: [systemConfigId], references: [systemConfigId])

  @@map("banners")
}

model SystemConfiguration {
  systemConfigId Int      @id @default(autoincrement())
  shopName       String
  shopEmail      String
  shopPhone      String
  createdAt      DateTime @default(now()) @db.Timestamptz
  updatedAt      DateTime @updatedAt @db.Timestamptz

  banners      Banner[]
  priceFilters PriceFilter[]

  logoId Int         @unique
  logo   UploadImage @relation(fields: [logoId], references: [uploadImageId])

  @@map("system_configurations")
}

model PriceFilter {
  priceFilterId Int      @id @default(autoincrement())
  minPrice      Float
  maxPrice      Float
  createdAt     DateTime @default(now()) @db.Timestamptz
  updatedAt     DateTime @updatedAt @db.Timestamptz

  systemConfigId Int
  systemConfig   SystemConfiguration @relation(fields: [systemConfigId], references: [systemConfigId])

  @@map("price_filters")
}

model News {
  newsId    Int      @id @default(autoincrement())
  title     String   @unique
  slug      String
  content   String
  createdAt DateTime @default(now()) @db.Timestamptz
  updatedAt DateTime @updatedAt @db.Timestamptz
  
  uploadImageId Int         @unique @map("upload_image_id")
  thumbnail     UploadImage @relation(fields: [uploadImageId], references: [uploadImageId])

  @@map("newses")
}

model ProductImageEmbedding {
  productImageEmbeddingId Int                   @id @default(autoincrement())
  embedding               Unsupported("vector")

  uploadImageId Int         @unique @map("upload_image_id")
  uploadImage   UploadImage @relation(fields: [uploadImageId], references: [uploadImageId])

  productId Int     @map("product_id")
  product   Product @relation(fields: [productId], references: [productId])

  @@map("product_image_embeddings")
}

model ProductEmbedding {
  productEmbeddingId Int                   @id @default(autoincrement()) @map("product_embedding_id")
  embedding          Unsupported("vector")

  productId Int     @map("product_id")
  product   Product @relation(fields: [productId], references: [productId])

  @@map("product_embeddings")
}

model PriceHistory {
  priceHistoryId Int       @id @default(autoincrement())
  price          Float
  startDate      DateTime
  endDate        DateTime?

  productId Int
  product   Product @relation(fields: [productId], references: [productId])

  @@map("price_histories")
}

model Product {
  productId   Int      @id @default(autoincrement())
  productName String   @unique
  slug        String   @unique
  quantity    Int
  description String
  vat         Float
  soldNumber  Int      @default(0)
  avgRating   Float    @default(0)
  isActive    Boolean
  createdAt   DateTime @default(now()) @db.Timestamptz
  updatedAt   DateTime @updatedAt @db.Timestamptz

  productImages          UploadImage[]
  productImageEmbeddings ProductImageEmbedding[]

  brandId Int
  brand   Brand @relation(fields: [brandId], references: [brandId])

  categoryId Int
  category   Category @relation(fields: [categoryId], references: [categoryId])

  prices PriceHistory[]

  reviews Review[]

  productInfoValues ProductInfoValue[]

  cartDetails CartDetail[]

  orderDetails OrderDetail[]

  promotionPeriods PromotionPeriod[] @relation("product_promotionperiod")

  productEmbeddings ProductEmbedding[]

  @@map("products")
}

model Brand {
  brandId   Int      @id @default(autoincrement())
  brandName String   @unique
  brandDesc String
  isActive  Boolean
  createdAt DateTime @default(now()) @db.Timestamptz
  updatedAt DateTime @updatedAt @db.Timestamptz

  products Product[]

  @@map("brands")
}

model Category {
  categoryId   Int      @id @default(autoincrement())
  categoryName String   @unique
  slug         String   @unique
  isActive     Boolean
  createdAt    DateTime @default(now()) @db.Timestamptz
  updatedAt    DateTime @updatedAt @db.Timestamptz

  categoryThumbnailId Int         @unique
  categoryThumbnail   UploadImage @relation(fields: [categoryThumbnailId], references: [uploadImageId])

  products Product[]

  @@map("categories")
}

model Review {
  reviewId  Int      @id @default(autoincrement())
  comment   String
  rating    Float?
  createdAt DateTime @default(now()) @db.Timestamptz

  orderDetailId Int?         @unique
  orderDetail   OrderDetail? @relation(fields: [orderDetailId], references: [orderDetailId])

  userId Int
  user   User @relation(fields: [userId], references: [userId])

  productId Int?
  product   Product? @relation(fields: [productId], references: [productId])

  uploadImages UploadImage[]

  parentReviewId Int?
  parentReview   Review? @relation("reply", fields: [parentReviewId], references: [reviewId])

  childrenReviews Review[] @relation("reply")

  @@map("reviews")
}

model ProductInformation {
  productInfoId   Int      @id @default(autoincrement())
  productInfoName String
  isActive        Boolean
  type            String
  options         String[]
  createdAt       DateTime @default(now()) @db.Timestamptz
  updatedAt       DateTime @updatedAt @db.Timestamptz

  productInfoDetails ProductInfoValue[]

  @@map("product_informations")
}

model ProductInfoValue {
  value String

  productInfoId Int
  productInfo   ProductInformation @relation(fields: [productInfoId], references: [productInfoId])

  productId Int
  product   Product @relation(fields: [productId], references: [productId])

  @@id([productId, productInfoId])
  @@map("product_info_values")
}

model User {
  userId    Int       @id @default(autoincrement())
  fullName  String
  email     String    @unique
  password  String?
  phone     String?
  gender    Boolean?
  birthday  DateTime?
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now()) @db.Timestamptz
  updatedAt DateTime  @updatedAt @db.Timestamptz

  addresses Address[]

  avatarId Int?         @unique
  avatar   UploadImage? @relation(fields: [avatarId], references: [uploadImageId])

  roleId Int?
  role   Role? @relation(fields: [roleId], references: [roleId])

  sentMessages     Message[] @relation("sentMessages")
  receivedMessages Message[] @relation("receivedMessages")

  cart Cart?

  orders Order[]

  vouchers Voucher[] @relation("user_voucher")

  reviews Review[]

  @@map("users")
}

model Cart {
  cartId Int @id @default(autoincrement())

  userId Int  @unique
  user   User @relation(fields: [userId], references: [userId])

  cartDetails CartDetail[]

  @@map("carts")
}

model CartDetail {
  quantity Int

  productId Int
  product   Product @relation(fields: [productId], references: [productId])

  cartId Int
  cart   Cart @relation(fields: [cartId], references: [cartId])

  @@id([productId, cartId])
  @@map("cart_details")
}

model Address {
  addressId    Int     @id @default(autoincrement())
  addressName  String
  provinceId   Int
  districtId   Int
  wardCode     String
  provinceName String
  districtName String
  wardName     String
  detail       String
  contactName  String
  contactPhone String
  isDefault    Boolean

  userId Int
  user   User @relation(fields: [userId], references: [userId])

  @@map("addresses")
}

model Order {
  orderId       Int       @id @default(autoincrement())
  totalPrice    Float
  totalDiscount Float
  shippingFee   Float
  finalPrice    Float
  paymentStatus Boolean
  paidDate      DateTime?
  createdAt     DateTime  @default(now()) @db.Timestamptz
  updatedAt     DateTime  @updatedAt @db.Timestamptz

  userId Int
  user   User @relation(fields: [userId], references: [userId])

  orderDetails OrderDetail[]

  orderAddressId Int?          @unique
  orderAddress   OrderAddress? @relation(fields: [orderAddressId], references: [orderAddressId])

  orderTrackings OrderTracking[]

  paymentMethodId Int
  paymentMethod   PaymentMethod @relation(fields: [paymentMethodId], references: [paymentMethodId])

  voucherId Int?
  voucher   Voucher? @relation(fields: [voucherId], references: [voucherId])

  @@map("orders")
}

model OrderTracking {
  time DateTime @default(now()) @db.Timestamptz

  orderId Int
  order   Order @relation(fields: [orderId], references: [orderId])

  orderStatusId Int
  orderStatus   OrderStatus @relation(fields: [orderStatusId], references: [orderStatusId])

  @@id([orderId, orderStatusId])
  @@map("order_trackings")
}

model OrderStatus {
  orderStatusId Int    @id @default(autoincrement())
  statusName    String

  orderTrackings OrderTracking[]

  @@map("order_statuses")
}

model OrderDetail {
  orderDetailId   Int   @id @default(autoincrement())
  price           Float
  discountedPrice Float
  quantity        Int

  review Review? @relation

  orderId Int
  order   Order @relation(fields: [orderId], references: [orderId])

  productId Int
  product   Product @relation(fields: [productId], references: [productId])

  @@map("order_details")
}

model OrderAddress {
  orderAddressId Int    @id @default(autoincrement())
  address        String
  contactName    String
  contactPhone   String

  order Order?

  @@map("order_addresses")
}

model PaymentMethod {
  paymentMethodId   Int    @id @default(autoincrement())
  paymentMethodName String

  order Order[]

  @@map("payment_methods")
}

model Voucher {
  voucherId           Int      @id @default(autoincrement())
  voucherCode         String   @unique
  discountType        String
  discountValue       Float
  minOrderPrice       Float
  maxPriceDiscount    Float
  startDate           DateTime
  endDate             DateTime
  quantity            Int
  collectedQuantity   Int      @default(0)
  currentUsedQuantity Int      @default(0)
  createdAt           DateTime @default(now()) @db.Timestamptz
  updatedAt           DateTime @updatedAt @db.Timestamptz

  orders Order[]

  users User[] @relation("user_voucher")

  @@map("vouchers")
}

model Promotion {
  promotionId   Int      @id @default(autoincrement())
  promotionName String
  description   String
  createdAt     DateTime @default(now()) @db.Timestamptz
  updatedAt     DateTime @updatedAt @db.Timestamptz

  promotionThumbnailId Int         @unique
  promotionThumbnail   UploadImage @relation(fields: [promotionThumbnailId], references: [uploadImageId])

  promotionPeriods PromotionPeriod[]

  @@map("promotions")
}

model PromotionPeriod {
  promotionPeriodId Int      @id @default(autoincrement())
  discountType      String // "percentage", "fixed_amount"
  discountValue     Float
  startDate         DateTime
  endDate           DateTime

  promotionId Int
  promotion   Promotion @relation(fields: [promotionId], references: [promotionId])
  
  products     Product[] @relation("product_promotionperiod")

  @@map("promotion_periods")
}
