generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  roleId Int @id @default(autoincrement())
  roleName String
  roleDesc String
  isActive Boolean
  createdAt DateTime @default(now()) @db.Timestamptz
  updatedAt DateTime @updatedAt @db.Timestamptz

  users User[]
  permissions Permission[] @relation("permission_roles")

  @@map("roles")
}

model Permission {
  permissionId Int @id @default(autoincrement())
  permissionName String
  apiPath String
  medthod String
  module String
  createdAt DateTime @default(now()) @db.Timestamptz
  updatedAt DateTime @updatedAt @db.Timestamptz

  roles Role[] @relation("permission_roles")

  @@map("permissions")
}

model Conversation {
  conversationid Int @id @default(autoincrement())
  text String
  isRead Boolean

  senderId       Int
  sender         User   @relation("Sent", fields: [senderId], references: [userId])

  receiverId     Int
  receiver       User   @relation("Received", fields: [receiverId], references: [userId])

  @@map("conversations")
}

model UploadImage {
  uploadImageId Int @id @default(autoincrement())
  url String
  publicId String
  createdAt DateTime @default(now()) @db.Timestamptz
  updatedAt DateTime @updatedAt @db.Timestamptz

  banners Banner[]
  productImages ProductImage[]
  blogImages BlogImage[]
  productImageEmbeddings ProductImageEmbedding[]
  avatar User[]
  shopLogo SystemConfiguration[]

  @@map("upload_images")
}

model Banner {
  bannerId Int @id @default(autoincrement())
  isActive Boolean

  imageId Int
  image UploadImage @relation(fields: [imageId], references: [uploadImageId])

  systemConfigId Int
  systemConfig SystemConfiguration @relation(fields: [systemConfigId], references: [systemConfigId])

  @@map("banners")
}

model SystemConfiguration {
  systemConfigId Int @id @default(autoincrement())
  shopName String
  shopEmail String
  shopPhone String

  banners Banner[]
  priceFillters PriceFillter[]

  shopLogoId Int
  shopLogo UploadImage @relation(fields: [shopLogoId], references: [uploadImageId])

  @@map("system_configurations")
}

model PriceFillter {
  priceFillterId Int @id @default(autoincrement())
  minPrice Float
  maxPrice Float

  systemConfigId Int
  systemConfig SystemConfiguration @relation(fields: [systemConfigId], references: [systemConfigId])

  @@map("price_fillters")
}

model Blog {
  blogId Int @id @default(autoincrement())
  title String @unique
  slug String
  text String
  published Boolean
  publishedAt DateTime @default(now()) @db.Timestamptz

  blogImages BlogImage[]

  @@map("blogs")
}

model BlogImage {
  blogImageId Int @id @default(autoincrement())

  blogId Int
  blog Blog @relation(fields: [blogId], references: [blogId])

  imageId Int
  image UploadImage @relation(fields: [imageId], references: [uploadImageId])

  @@map("blog_images")
}

model ProductImageEmbedding {
  productImageEmbeddingId Int @id @default(autoincrement())
  embedding Unsupported("vector")

  uploadImageId Int @map("upload_image_id")
  uploadImage UploadImage @relation(fields: [uploadImageId], references: [uploadImageId])

  productId Int @map("product_id")
  product Product @relation(fields: [productId], references: [productId])

  @@map("product_image_embeddings")
}

model ProductImage {
  productImageId Int @id @default(autoincrement())

  uploadImageId Int
  uploadImage UploadImage @relation(fields: [uploadImageId], references: [uploadImageId])

  productId Int
  product Product @relation(fields: [productId], references: [productId])

  @@map("product_images")
}

model ProductEmbedding {
  productEmbeddingId Int @id @default(autoincrement())
  embedding Unsupported("vector")

  productId Int @unique
  product Product @relation(fields: [productId], references: [productId])

  @@map("product_embeddings")
}

model Product {
  productId Int @id @default(autoincrement())
  productName String @unique
  price Float
  slug String
  visible Boolean
  quantity Int
  description String
  soldNumber Int?
  avgRating Float?

  productImages ProductImage[]
  productImageEmbeddings ProductImageEmbedding[]

  brandId Int?
  brand Brand? @relation(fields: [brandId], references: [brandId])

  categoryId Int?
  category Category? @relation(fields: [categoryId], references: [categoryId])

  reviews Review[]

  productInfoDetails ProductInfoValue[]  

  cartDetails CartDetail[]

  orderDetails OrderDetail[]

  discounts Discount[] @relation("product_discount")

  productEmbeddingId Int?
  productEmbedding ProductEmbedding? @relation
  
  @@map("products")
}

model Brand {
  brandId Int @id @default(autoincrement())
  brandName String @unique
  brandDesc String
  createdAt DateTime @default(now()) @db.Timestamptz
  updatedAt DateTime @updatedAt @db.Timestamptz

  products Product[]

  @@map("brands")
}

model Category {
  categoryId Int @id @default(autoincrement())
  categoryName String @unique
  slug String
  createdAt DateTime @default(now()) @db.Timestamptz
  updatedAt DateTime @updatedAt @db.Timestamptz

  products Product[]

  @@map("categories")
}

model Review {
  reviewId Int @id @default(autoincrement())
  comment String
  rating Float
  createdAt DateTime @default(now()) @db.Timestamptz
  updatedAt DateTime @updatedAt @db.Timestamptz

  userId Int
  user User @relation(fields: [userId], references: [userId])

  productId Int
  product Product @relation(fields: [productId], references: [productId])

  parentReviewId Int?
  parentReview Review? @relation("reply", fields: [parentReviewId], references: [reviewId])

  childrenReviews Review[] @relation("reply")

  @@map("reviews")
}

model ProductInformation {
  productInfoId Int @id @default(autoincrement())
  productInfoName String

  productInfoDetails ProductInfoValue[]

  @@map("product_informations")
}

model ProductInfoValue {
  value String

  productInfoId Int
  productInfo ProductInformation @relation(fields: [productInfoId], references: [productInfoId])

  productId Int
  product Product @relation(fields: [productId], references: [productId])

  @@id([productId, productInfoId])

  @@map("product_info_values")
}

model User {
  userId    Int      @id @default(autoincrement())
  fullName      String
  email     String   @unique
  password  String?
  phone     String?
  gender    Boolean?
  birthday DateTime? 
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now()) @db.Timestamptz
  updatedAt DateTime @updatedAt @db.Timestamptz

  addresses Address[]

  avatar UploadImage? @relation(fields: [avatarId], references: [uploadImageId])
  avatarId Int?

  roleId Int?
  role Role? @relation(fields: [roleId], references: [roleId])

  sentConversations     Conversation[] @relation("Sent")
  receivedConversations Conversation[] @relation("Received")

  cartId Int?
  cart Cart? @relation

  orders Order[]

  vouchers Voucher[] @relation("user_voucher")

  reviews Review[]  

  @@map("users")
}

model Cart {
  cartId Int @id @default(autoincrement())

  userId Int @unique
  user User @relation(fields: [userId], references: [userId])

  cartDetails CartDetail[]

  @@map("carts")
}

model CartDetail {
  quantity Int

  productId Int
  product Product @relation(fields: [productId], references: [productId])

  cartId Int
  cart Cart @relation(fields: [cartId], references: [cartId])

  @@id([productId, cartId])

  @@map("cart_details")
}

model Address {
  addressId Int @id @default(autoincrement())
  addressName String
  provinceCode String
  districtCode String
  wardCode String
  provinceName String
  districtName String
  wardName String
  detail String
  isDefault Boolean
  contactName String
  contactPhone String

  userId Int
  user User @relation(fields: [userId], references: [userId])

  @@map("addresses")
}

model Order {
  orderId Int @id @default(autoincrement())
  totalPrice Float
  totalDiscount Float
  shippingFee Float
  finalPrice Float
  paymentStatus Boolean
  paidDate DateTime?
  createdAt DateTime @default(now()) @db.Timestamptz
  updatedAt DateTime @updatedAt @db.Timestamptz

  userId Int
  user User @relation(fields: [userId], references: [userId])

  orderDetails OrderDetail[]

  orderAdressId Int?
  orderAddress OrderAdress? @relation

  orderStatusId Int
  orderStatus OrderStatus @relation(fields: [orderStatusId], references: [orderStatusId])

  paymentMethodId Int
  paymentMethod PaymentMethod @relation(fields: [paymentMethodId], references: [paymentMethodId])

  voucherId Int?
  voucher Voucher? @relation(fields: [voucherId], references: [voucherId])

  @@map("orders")
}

model OrderDetail {
  price Float
  discountPrice Float
  quantity Int

  orderId Int
  order Order @relation(fields: [orderId], references: [orderId])

  productId Int
  product Product @relation(fields: [productId], references: [productId])

  @@id([orderId, productId])

  @@map("order_details")
}

model OrderAdress {
  orderAddressId Int @id @default(autoincrement())
  address String
  contactName String
  contactPhone String

  orderId Int @unique
  order Order @relation(fields: [orderId], references: [orderId])

  @@map("order_addresses")
}

model OrderStatus {
  orderStatusId Int @id @default(autoincrement())
  statusName String

  orders Order[]

  @@map("order_statuses")
}

model PaymentMethod {
  paymentMethodId Int @id @default(autoincrement())
  paymentMethodName String

  order Order[]

  @@map("payment_methods")
}

model Voucher {
  voucherId Int @id @default(autoincrement())
  voucherCode String @unique
  discountType String
  discountValue Float
  minOrderPrice Float
  maxPriceDiscount Float
  startDate DateTime
  endDate DateTime
  quantity Int
  colectedQuantity Int
  currentUsedQuantity Int
  createdAt DateTime @default(now()) @db.Timestamptz
  updatedAt DateTime @updatedAt @db.Timestamptz

  orders Order[]

  users User[] @relation("user_voucher")

  @@map("vouchers")
}

model Discount {
  discountId Int @id @default(autoincrement())
  discountType String
  discountValue Float
  startDate DateTime
  endDate DateTime
  createdAt DateTime @default(now()) @db.Timestamptz
  updatedAt DateTime @updatedAt @db.Timestamptz

  products Product[] @relation("product_discount")

  @@map("discounts")
}